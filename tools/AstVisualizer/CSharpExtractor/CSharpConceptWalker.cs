// Copyright (c) Microsoft Corporation.
// Licensed under the MIT license.

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace CSharpExtractor
{
    using Microsoft.CodeAnalysis;
    using Microsoft.CodeAnalysis.CSharp;
    using Microsoft.CodeAnalysis.CSharp.Syntax;
    using System.Xml.Linq;

    /// <summary>
    /// This class can be used if it is required to do traversal where individual notes are processed. 
    /// It also has a general Visit node method. First the VisitNode method is called, 
    /// and then the more specialized Visit* method is called.
    /// 
    /// The visit methods below were generated by traversing the CSharpSyntaxWalker methods using reflection.
    /// It is not practical to hand write all these methods by hand.
    /// If a version is required for VB.NET (or as new versions of C# see the light of day), the same approach 
    /// can be followed to automatically generate the methods. This will result in a syntax-only tree being 
    /// extracted - The methods will then need to be modified in some cases to include the model information.
    /// If required, the generator (that walks the methods of the CSharpSyntaxVisitor) can be made more intelligent,
    /// by knowing which nodes have auxiliary information (like type information) by also knowing about the 
    /// extension methods in Microsoft.CodeAnalysis.CSharp.CSharpExtensions). In this way, the extractor methods 
    /// can be generated with fidelity.
    /// </summary>
    class CSharpConceptWalker : CSharpSyntaxWalker
    {
        // Generating from FW
        private readonly XDocument document;
        private readonly CSharpCompilation compilation;
        private readonly SemanticModel semanticModel;
        private SymbolDisplayFormat symbolDisplayFormat;
        private readonly IDictionary<string, string> classBaseList = new Dictionary<string, string>();

        /// <summary>
        /// Indicates whether or not the source should be included in the node defining classes and 
        /// other top level compilation units. This should really be fetched from a settings file or
        /// an environment variable.
        /// </summary>
        private bool IncludeSource { get { return true; } }

        /// <summary>
        /// This is the stack of XML elements built during extraction. This is needed because there
        /// is no payload information that can be passed to each visit* method
        /// </summary>
        private Stack<XElement> stack = new Stack<XElement>();

        public XDocument Document { get { return this.document; } }

        protected string GetFullMetadataName(ISymbol s)
        {
            if (s == null || IsRootNamespace(s))
            {
                return string.Empty;
            }

            //if (s is ITypeSymbol ts)
            //{
            //    return TypeName(ts);
            //}

            if (s is ILocalSymbol ls)
            {
                return ls.ContainingSymbol.ToString() + "." + s.Name;
            }
            return s.ToString();
            //var sb = new StringBuilder(s.MetadataName);
            //var last = s;

            //s = s.ContainingSymbol;

            //while (!IsRootNamespace(s))
            //{
            //    if (s is ITypeSymbol && last is ITypeSymbol)
            //    {
            //        sb.Insert(0, "+");
            //    }
            //    else
            //    {
            //        sb.Insert(0, ".");
            //    }

            //    sb.Insert(0, s.OriginalDefinition.ToDisplayString(SymbolDisplayFormat.MinimallyQualifiedFormat));
            //    //sb.Insert(0, s.MetadataName);
            //    s = s.ContainingSymbol;
            //}

            //return sb.ToString();
        }

        private static bool IsRootNamespace(ISymbol symbol)
        {
            INamespaceSymbol s = null;
            return ((s = symbol as INamespaceSymbol) != null) && s.IsGlobalNamespace;
        }

        private void AddLocationAttributes(XElement element, SyntaxNode node)
        {
            this.AddCommentAttribute(node, element);
            element.Add(new XAttribute("StartLine", node.GetLocation().GetLineSpan().StartLinePosition.Line + 1));
            element.Add(new XAttribute("StartCol", node.GetLocation().GetLineSpan().StartLinePosition.Character + 1));
            element.Add(new XAttribute("EndLine", node.GetLocation().GetLineSpan().EndLinePosition.Line + 1));
            element.Add(new XAttribute("EndCol", node.GetLocation().GetLineSpan().EndLinePosition.Character + 1));
        }

        private void AddTypeAttribute(XElement element, ExpressionSyntax node)
        {
            TypeInfo expressionType = this.semanticModel.GetTypeInfo(node);
            var type = TypeName(expressionType.Type);
            if (!string.IsNullOrEmpty(type))
            {
                element.Add(new XAttribute("ExpressionType", type));
            }
        }

        private void AddCommentAttribute(SyntaxNode node, XElement element)
        {
            var triviaString = node.GetLeadingTrivia().ToString();
            if (triviaString.Contains("//") || triviaString.Contains("/*"))
                element.Add(new XAttribute("Comment", triviaString));
        }

        #region Symbol Information
        private void AddSymbolInformation(XElement element, ISymbol symbol, string prefix = "")
        {
            if (prefix.Length > 0)
            {
                prefix += ".";
            }

            if (symbol != null)
            {
                element.Add(new XAttribute(prefix + nameof(symbol.Name), symbol.Name));
                element.Add(new XAttribute(prefix + "FQN", GetFullMetadataName(symbol)));

                if (symbol.DeclaredAccessibility != Accessibility.NotApplicable)
                {
                    element.Add(new XAttribute(prefix + nameof(symbol.DeclaredAccessibility), symbol.DeclaredAccessibility));
                }

                element.Add(new XAttribute(prefix + nameof(symbol.IsStatic), symbol.IsStatic));
                element.Add(new XAttribute(prefix + nameof(symbol.IsAbstract), symbol.IsAbstract));
                element.Add(new XAttribute(prefix + nameof(symbol.IsOverride), symbol.IsOverride));
                element.Add(new XAttribute(prefix + nameof(symbol.IsVirtual), symbol.IsVirtual));
                element.Add(new XAttribute(prefix + nameof(symbol.IsSealed), symbol.IsSealed));
                element.Add(new XAttribute(prefix + nameof(symbol.IsImplicitlyDeclared), symbol.IsImplicitlyDeclared));
                element.Add(new XAttribute(prefix + nameof(symbol.IsExtern), symbol.IsExtern));
                element.Add(new XAttribute(prefix + nameof(symbol.IsDefinition), symbol.IsDefinition));
                element.Add(new XAttribute(prefix + nameof(symbol.Language), symbol.Language));
                element.Add(new XAttribute(prefix + nameof(symbol.Kind), symbol.Kind));

                if (symbol.ContainingType != null)
                {
                    element.Add(new XAttribute(prefix + nameof(symbol.ContainingType), symbol.ContainingType.Name));
                }

                if (symbol.ContainingAssembly != null)
                {
                    element.Add(new XAttribute(prefix + nameof(symbol.ContainingAssembly), symbol.ContainingAssembly.Identity.GetDisplayName()));
                }
            }
        }

        private void AddSymbolInformation(XElement element, ILabelSymbol symbol)
        {
            if (symbol != null)
            {
                this.AddSymbolInformation(element, (ISymbol)symbol);
            }
        }

        private void AddSymbolInformation(XElement element, ITypeSymbol symbol, string prefix = "")
        {
            if (symbol != null)
            {
                if (prefix.Length > 0)
                {
                    prefix = prefix + ".";
                }

                element.Add(new XAttribute(prefix + "Type", TypeName(symbol)));

                if (symbol.BaseType != null)
                {
                    element.Add(new XAttribute(prefix + nameof(symbol.BaseType), TypeName(symbol.BaseType)));
                }

                element.Add(new XAttribute(prefix + nameof(symbol.IsReadOnly), symbol.IsReadOnly));
                element.Add(new XAttribute(prefix + nameof(symbol.IsRefLikeType), symbol.IsRefLikeType));
                element.Add(new XAttribute(prefix + nameof(symbol.SpecialType), symbol.SpecialType));
                element.Add(new XAttribute(prefix + nameof(symbol.IsTupleType), symbol.IsTupleType));
                element.Add(new XAttribute(prefix + nameof(symbol.IsAnonymousType), symbol.IsAnonymousType));
                element.Add(new XAttribute(prefix + nameof(symbol.IsValueType), symbol.IsValueType));
                element.Add(new XAttribute(prefix + nameof(symbol.IsReferenceType), symbol.IsReferenceType));

                this.AddSymbolInformation(element, (ISymbol)symbol, prefix);
            }
        }

        private void AddSymbolInformation(XElement element, ILocalSymbol symbol, string prefix = "")
        {
            if (symbol != null)
            {
                if (prefix.Length > 0)
                {
                    prefix = prefix + ".";
                }

                element.Add(new XAttribute(prefix + nameof(symbol.NullableAnnotation), symbol.NullableAnnotation));
                element.Add(new XAttribute(prefix + nameof(symbol.IsConst), symbol.IsConst));
                element.Add(new XAttribute(prefix + nameof(symbol.IsRef), symbol.IsRef));
                element.Add(new XAttribute(prefix + nameof(symbol.RefKind), symbol.RefKind));
                element.Add(new XAttribute(prefix + nameof(symbol.HasConstantValue), symbol.HasConstantValue));
                if (symbol.ConstantValue != null)
                {
                    element.Add(new XAttribute(prefix + nameof(symbol.ConstantValue), symbol.ConstantValue));

                }
                element.Add(new XAttribute(prefix + nameof(symbol.IsFixed), symbol.IsFixed));

                var type = GetFullMetadataName(symbol.Type);
                if (!string.IsNullOrEmpty(type))
                {
                    element.Add(new XAttribute(prefix + nameof(symbol.Type), type));
                }
                this.AddSymbolInformation(element, (ISymbol)symbol);
            }
        }

        private void AddSymbolInformation(XElement element, INamedTypeSymbol symbol)
        {
            if (symbol != null)
            {
                element.Add(new XAttribute(nameof(symbol.IsUnboundGenericType), symbol.IsUnboundGenericType));
                element.Add(new XAttribute(nameof(symbol.IsGenericType), symbol.IsGenericType));
                element.Add(new XAttribute(nameof(symbol.Arity), symbol.Arity));

                this.AddSymbolInformation(element, (ITypeSymbol)symbol);
            }
        }

        private void AddSymbolInformation(XElement element, IAliasSymbol symbol)
        {
            if (symbol != null)
            {

            }
        }

        private void AddSymbolInformation(XElement element, ITypeParameterSymbol symbol)
        {
            if (symbol != null)
            {

            }
        }

        private void AddSymbolInformation(XElement element, IPropertySymbol symbol)
        {
            if (symbol != null)
            {
                element.Add(new XAttribute(nameof(symbol.IsReadOnly), symbol.IsReadOnly));
                element.Add(new XAttribute(nameof(symbol.IsIndexer), symbol.IsIndexer));
                element.Add(new XAttribute(nameof(symbol.ReturnsByRefReadonly), symbol.ReturnsByRefReadonly));
                element.Add(new XAttribute(nameof(symbol.ReturnsByRef), symbol.ReturnsByRef));
                element.Add(new XAttribute(nameof(symbol.IsWithEvents), symbol.IsWithEvents));
                element.Add(new XAttribute(nameof(symbol.IsWriteOnly), symbol.IsWriteOnly));
                element.Add(new XAttribute(nameof(symbol.RefKind), symbol.RefKind));
                element.Add(new XAttribute(nameof(symbol.Type), GetFullMetadataName(symbol.Type)));

                if (symbol.GetMethod != null)
                {
                    this.AddSymbolInformation(element, symbol.GetMethod, "Getter");
                }

                if (symbol.SetMethod != null)
                {
                    this.AddSymbolInformation(element, symbol.SetMethod, "Setter");
                }
            }
        }

        private void AddSymbolInformation(XElement element, IMethodSymbol symbol, string prefix = "")
        {
            if (symbol != null)
            {
                if (prefix.Length > 0)
                {
                    prefix += ".";
                }

                element.Add(new XAttribute(prefix + nameof(symbol.Arity), symbol.Arity));
                element.Add(new XAttribute(prefix + nameof(symbol.ReturnType), GetFullMetadataName(symbol.ReturnType)));
                element.Add(new XAttribute(prefix + nameof(symbol.IsReadOnly), symbol.IsReadOnly));
                element.Add(new XAttribute(prefix + nameof(symbol.IsConditional), symbol.IsConditional));
                element.Add(new XAttribute(prefix + nameof(symbol.IsExtensionMethod), symbol.IsExtensionMethod));
                element.Add(new XAttribute(prefix + nameof(symbol.IsAsync), symbol.IsAsync));
                element.Add(new XAttribute(prefix + nameof(symbol.IsGenericMethod), symbol.IsGenericMethod));
                element.Add(new XAttribute(prefix + nameof(symbol.IsCheckedBuiltin), symbol.IsCheckedBuiltin));
                element.Add(new XAttribute(prefix + nameof(symbol.HidesBaseMethodsByName), symbol.HidesBaseMethodsByName));
                element.Add(new XAttribute(prefix + nameof(symbol.ReturnsVoid), symbol.ReturnsVoid));
                element.Add(new XAttribute(prefix + nameof(symbol.ReturnsByRef), symbol.ReturnsByRef));
                element.Add(new XAttribute(prefix + nameof(symbol.ReturnsByRefReadonly), symbol.ReturnsByRefReadonly));
                element.Add(new XAttribute(prefix + nameof(symbol.MethodKind), symbol.MethodKind));
                element.Add(new XAttribute(prefix + nameof(symbol.RefKind), symbol.RefKind));

                if (symbol.OverriddenMethod != null)
                {
                    element.Add(new XAttribute(prefix + nameof(symbol.OverriddenMethod), symbol.OverriddenMethod.Name));
                    element.Add(new XAttribute(prefix + "OverriddenMethodType", symbol.OverriddenMethod.ContainingSymbol.ToString()));
                }

                this.AddSymbolInformation(element, (ISymbol)symbol);
            }
        }

        private void AddSymbolInformation(XElement element, IRangeVariableSymbol symbol)
        {
        }

        #endregion

        private static string ElementName(SyntaxNode node)
        {
            return node.Kind().ToString();
        }

        private static XElement CreateElement(SyntaxNode node)
        {
            string nodeKind = ElementName(node);
            return new XElement(nodeKind);
        }

        private string TypeName(ITypeSymbol typeSymbol)
        {
            return typeSymbol?.ToDisplayString(this.symbolDisplayFormat) ?? string.Empty;
        }

        /// <summary>
        /// Creates an instance of trhe Concept walker for a compilationunit in the compilation
        /// </summary>
        /// <param name="compilation">The compilation under which this compilationunit is compiled.</param>
        /// <param name="tree">The compilation unit</param>
        public CSharpConceptWalker(CSharpCompilation compilation, SyntaxTree tree, XDocument compilationDocument)
        {
            this.compilation = compilation;
            this.semanticModel = compilation.GetSemanticModel(tree);

            this.symbolDisplayFormat = SymbolDisplayFormat.MinimallyQualifiedFormat;

            this.document = compilationDocument;
            stack.Push(compilationDocument.Root);
        }

        public override void VisitCatchFilterClause(CatchFilterClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitCatchFilterClause(node);
            this.stack.Pop();
        }
        public override void VisitFinallyClause(FinallyClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitFinallyClause(node);
            this.stack.Pop();
        }
        public override void VisitCompilationUnit(CompilationUnitSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitCompilationUnit(node);
            this.stack.Pop();
        }
        public override void VisitExternAliasDirective(ExternAliasDirectiveSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitExternAliasDirective(node);
            this.stack.Pop();
        }
        public override void VisitUsingDirective(UsingDirectiveSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitUsingDirective(node);
            this.stack.Pop();
        }
        public override void VisitNamespaceDeclaration(NamespaceDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitNamespaceDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitAttributeList(AttributeListSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAttributeList(node);
            this.stack.Pop();
        }
        public override void VisitAttributeTargetSpecifier(AttributeTargetSpecifierSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAttributeTargetSpecifier(node);
            this.stack.Pop();
        }
        public override void VisitAttribute(AttributeSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAttribute(node);
            this.stack.Pop();
        }
        public override void VisitAttributeArgumentList(AttributeArgumentListSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAttributeArgumentList(node);
            this.stack.Pop();
        }
        public override void VisitAttributeArgument(AttributeArgumentSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAttributeArgument(node);
            this.stack.Pop();
        }
        public override void VisitNameEquals(NameEqualsSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitNameEquals(node);
            this.stack.Pop();
        }
        public override void VisitTypeParameterList(TypeParameterListSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitTypeParameterList(node);
            this.stack.Pop();
        }
        public override void VisitTypeParameter(TypeParameterSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitTypeParameter(node);
            this.stack.Pop();
        }
        public override void VisitClassDeclaration(ClassDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitClassDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitStructDeclaration(StructDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitStructDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitInterfaceDeclaration(InterfaceDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitInterfaceDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitEnumDeclaration(EnumDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitEnumDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitDelegateDeclaration(DelegateDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitDelegateDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitEnumMemberDeclaration(EnumMemberDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitEnumMemberDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitBaseList(BaseListSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitBaseList(node);
            this.stack.Pop();
        }
        public override void VisitSimpleBaseType(SimpleBaseTypeSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitSimpleBaseType(node);
            this.stack.Pop();
        }
        public override void VisitTypeParameterConstraintClause(TypeParameterConstraintClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitTypeParameterConstraintClause(node);
            this.stack.Pop();
        }
        public override void VisitConstructorConstraint(ConstructorConstraintSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitConstructorConstraint(node);
            this.stack.Pop();
        }
        public override void VisitClassOrStructConstraint(ClassOrStructConstraintSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitClassOrStructConstraint(node);
            this.stack.Pop();
        }
        public override void VisitTypeConstraint(TypeConstraintSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitTypeConstraint(node);
            this.stack.Pop();
        }
        public override void VisitFieldDeclaration(FieldDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitFieldDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitEventFieldDeclaration(EventFieldDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitEventFieldDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitExplicitInterfaceSpecifier(ExplicitInterfaceSpecifierSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitExplicitInterfaceSpecifier(node);
            this.stack.Pop();
        }
        public override void VisitMethodDeclaration(MethodDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitMethodDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitOperatorDeclaration(OperatorDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitOperatorDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitConversionOperatorDeclaration(ConversionOperatorDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitConversionOperatorDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitConstructorDeclaration(ConstructorDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitConstructorDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitConstructorInitializer(ConstructorInitializerSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitConstructorInitializer(node);
            this.stack.Pop();
        }
        public override void VisitDestructorDeclaration(DestructorDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitDestructorDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitPropertyDeclaration(PropertyDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitPropertyDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitArrowExpressionClause(ArrowExpressionClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitArrowExpressionClause(node);
            this.stack.Pop();
        }
        public override void VisitEventDeclaration(EventDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitEventDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitIndexerDeclaration(IndexerDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitIndexerDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitAccessorList(AccessorListSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAccessorList(node);
            this.stack.Pop();
        }
        public override void VisitAccessorDeclaration(AccessorDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAccessorDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitParameterList(ParameterListSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitParameterList(node);
            this.stack.Pop();
        }
        public override void VisitBracketedParameterList(BracketedParameterListSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitBracketedParameterList(node);
            this.stack.Pop();
        }
        public override void VisitParameter(ParameterSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitParameter(node);
            this.stack.Pop();
        }
        public override void VisitIncompleteMember(IncompleteMemberSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitIncompleteMember(node);
            this.stack.Pop();
        }
        public override void VisitSkippedTokensTrivia(SkippedTokensTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitSkippedTokensTrivia(node);
            this.stack.Pop();
        }
        public override void VisitDocumentationCommentTrivia(DocumentationCommentTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitDocumentationCommentTrivia(node);
            this.stack.Pop();
        }
        public override void VisitTypeCref(TypeCrefSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitTypeCref(node);
            this.stack.Pop();
        }
        public override void VisitQualifiedCref(QualifiedCrefSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitQualifiedCref(node);
            this.stack.Pop();
        }
        public override void VisitNameMemberCref(NameMemberCrefSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitNameMemberCref(node);
            this.stack.Pop();
        }
        public override void VisitIndexerMemberCref(IndexerMemberCrefSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitIndexerMemberCref(node);
            this.stack.Pop();
        }
        public override void VisitOperatorMemberCref(OperatorMemberCrefSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitOperatorMemberCref(node);
            this.stack.Pop();
        }
        public override void VisitConversionOperatorMemberCref(ConversionOperatorMemberCrefSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitConversionOperatorMemberCref(node);
            this.stack.Pop();
        }
        public override void VisitCrefParameterList(CrefParameterListSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitCrefParameterList(node);
            this.stack.Pop();
        }
        public override void VisitCrefBracketedParameterList(CrefBracketedParameterListSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitCrefBracketedParameterList(node);
            this.stack.Pop();
        }
        public override void VisitCrefParameter(CrefParameterSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitCrefParameter(node);
            this.stack.Pop();
        }
        public override void VisitXmlElement(XmlElementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlElement(node);
            this.stack.Pop();
        }
        public override void VisitXmlElementStartTag(XmlElementStartTagSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlElementStartTag(node);
            this.stack.Pop();
        }
        public override void VisitXmlElementEndTag(XmlElementEndTagSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlElementEndTag(node);
            this.stack.Pop();
        }
        public override void VisitXmlEmptyElement(XmlEmptyElementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlEmptyElement(node);
            this.stack.Pop();
        }
        public override void VisitXmlName(XmlNameSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlName(node);
            this.stack.Pop();
        }
        public override void VisitXmlPrefix(XmlPrefixSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlPrefix(node);
            this.stack.Pop();
        }
        public override void VisitXmlTextAttribute(XmlTextAttributeSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlTextAttribute(node);
            this.stack.Pop();
        }
        public override void VisitXmlCrefAttribute(XmlCrefAttributeSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlCrefAttribute(node);
            this.stack.Pop();
        }
        public override void VisitXmlNameAttribute(XmlNameAttributeSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlNameAttribute(node);
            this.stack.Pop();
        }
        public override void VisitXmlText(XmlTextSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlText(node);
            this.stack.Pop();
        }
        public override void VisitXmlCDataSection(XmlCDataSectionSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlCDataSection(node);
            this.stack.Pop();
        }
        public override void VisitXmlProcessingInstruction(XmlProcessingInstructionSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlProcessingInstruction(node);
            this.stack.Pop();
        }
        public override void VisitXmlComment(XmlCommentSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitXmlComment(node);
            this.stack.Pop();
        }
        public override void VisitIfDirectiveTrivia(IfDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitIfDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitElifDirectiveTrivia(ElifDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitElifDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitElseDirectiveTrivia(ElseDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitElseDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitEndIfDirectiveTrivia(EndIfDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitEndIfDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitRegionDirectiveTrivia(RegionDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitRegionDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitEndRegionDirectiveTrivia(EndRegionDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitEndRegionDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitErrorDirectiveTrivia(ErrorDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitErrorDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitWarningDirectiveTrivia(WarningDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitWarningDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitBadDirectiveTrivia(BadDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitBadDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitDefineDirectiveTrivia(DefineDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitDefineDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitUndefDirectiveTrivia(UndefDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitUndefDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitLineDirectiveTrivia(LineDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitLineDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitPragmaWarningDirectiveTrivia(PragmaWarningDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitPragmaWarningDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitPragmaChecksumDirectiveTrivia(PragmaChecksumDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitPragmaChecksumDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitReferenceDirectiveTrivia(ReferenceDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitReferenceDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitLoadDirectiveTrivia(LoadDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitLoadDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitShebangDirectiveTrivia(ShebangDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitShebangDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitNullableDirectiveTrivia(NullableDirectiveTriviaSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitNullableDirectiveTrivia(node);
            this.stack.Pop();
        }
        public override void VisitIdentifierName(IdentifierNameSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            element.Add(new XAttribute("Text", node.Identifier.Text));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitIdentifierName(node);
            this.stack.Pop();
        }
        public override void VisitQualifiedName(QualifiedNameSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitQualifiedName(node);
            this.stack.Pop();
        }
        public override void VisitGenericName(GenericNameSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            element.Add(new XAttribute("Text", node.Identifier.Text));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitGenericName(node);
            this.stack.Pop();
        }
        public override void VisitTypeArgumentList(TypeArgumentListSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitTypeArgumentList(node);
            this.stack.Pop();
        }
        public override void VisitAliasQualifiedName(AliasQualifiedNameSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAliasQualifiedName(node);
            this.stack.Pop();
        }
        public override void VisitPredefinedType(PredefinedTypeSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitPredefinedType(node);
            this.stack.Pop();
        }
        public override void VisitArrayType(ArrayTypeSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitArrayType(node);
            this.stack.Pop();
        }
        public override void VisitArrayRankSpecifier(ArrayRankSpecifierSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitArrayRankSpecifier(node);
            this.stack.Pop();
        }
        public override void VisitPointerType(PointerTypeSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitPointerType(node);
            this.stack.Pop();
        }
        public override void VisitNullableType(NullableTypeSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitNullableType(node);
            this.stack.Pop();
        }
        public override void VisitTupleType(TupleTypeSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitTupleType(node);
            this.stack.Pop();
        }
        public override void VisitTupleElement(TupleElementSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitTupleElement(node);
            this.stack.Pop();
        }
        public override void VisitOmittedTypeArgument(OmittedTypeArgumentSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitOmittedTypeArgument(node);
            this.stack.Pop();
        }
        public override void VisitRefType(RefTypeSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitRefType(node);
            this.stack.Pop();
        }
        public override void VisitParenthesizedExpression(ParenthesizedExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitParenthesizedExpression(node);
            this.stack.Pop();
        }
        public override void VisitTupleExpression(TupleExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitTupleExpression(node);
            this.stack.Pop();
        }
        public override void VisitPrefixUnaryExpression(PrefixUnaryExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitPrefixUnaryExpression(node);
            this.stack.Pop();
        }
        public override void VisitAwaitExpression(AwaitExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAwaitExpression(node);
            this.stack.Pop();
        }
        public override void VisitPostfixUnaryExpression(PostfixUnaryExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitPostfixUnaryExpression(node);
            this.stack.Pop();
        }
        public override void VisitMemberAccessExpression(MemberAccessExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitMemberAccessExpression(node);
            this.stack.Pop();
        }
        public override void VisitConditionalAccessExpression(ConditionalAccessExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitConditionalAccessExpression(node);
            this.stack.Pop();
        }
        public override void VisitMemberBindingExpression(MemberBindingExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitMemberBindingExpression(node);
            this.stack.Pop();
        }
        public override void VisitElementBindingExpression(ElementBindingExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitElementBindingExpression(node);
            this.stack.Pop();
        }
        public override void VisitRangeExpression(RangeExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitRangeExpression(node);
            this.stack.Pop();
        }
        public override void VisitImplicitElementAccess(ImplicitElementAccessSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitImplicitElementAccess(node);
            this.stack.Pop();
        }
        public override void VisitBinaryExpression(BinaryExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitBinaryExpression(node);
            this.stack.Pop();
        }
        public override void VisitAssignmentExpression(AssignmentExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAssignmentExpression(node);
            this.stack.Pop();
        }
        public override void VisitConditionalExpression(ConditionalExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitConditionalExpression(node);
            this.stack.Pop();
        }
        public override void VisitThisExpression(ThisExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitThisExpression(node);
            this.stack.Pop();
        }
        public override void VisitBaseExpression(BaseExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitBaseExpression(node);
            this.stack.Pop();
        }
        public override void VisitLiteralExpression(LiteralExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            element.Add(new XAttribute("Value", node.Token.ValueText));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitLiteralExpression(node);
            this.stack.Pop();
        }
        public override void VisitMakeRefExpression(MakeRefExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitMakeRefExpression(node);
            this.stack.Pop();
        }
        public override void VisitRefTypeExpression(RefTypeExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitRefTypeExpression(node);
            this.stack.Pop();
        }
        public override void VisitRefValueExpression(RefValueExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitRefValueExpression(node);
            this.stack.Pop();
        }
        public override void VisitCheckedExpression(CheckedExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitCheckedExpression(node);
            this.stack.Pop();
        }
        public override void VisitDefaultExpression(DefaultExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitDefaultExpression(node);
            this.stack.Pop();
        }
        public override void VisitTypeOfExpression(TypeOfExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitTypeOfExpression(node);
            this.stack.Pop();
        }
        public override void VisitSizeOfExpression(SizeOfExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitSizeOfExpression(node);
            this.stack.Pop();
        }
        public override void VisitInvocationExpression(InvocationExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitInvocationExpression(node);
            this.stack.Pop();
        }
        public override void VisitElementAccessExpression(ElementAccessExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitElementAccessExpression(node);
            this.stack.Pop();
        }
        public override void VisitArgumentList(ArgumentListSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitArgumentList(node);
            this.stack.Pop();
        }
        public override void VisitBracketedArgumentList(BracketedArgumentListSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitBracketedArgumentList(node);
            this.stack.Pop();
        }
        public override void VisitArgument(ArgumentSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitArgument(node);
            this.stack.Pop();
        }
        public override void VisitNameColon(NameColonSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitNameColon(node);
            this.stack.Pop();
        }
        public override void VisitDeclarationExpression(DeclarationExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitDeclarationExpression(node);
            this.stack.Pop();
        }
        public override void VisitCastExpression(CastExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitCastExpression(node);
            this.stack.Pop();
        }
        public override void VisitAnonymousMethodExpression(AnonymousMethodExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAnonymousMethodExpression(node);
            this.stack.Pop();
        }
        public override void VisitSimpleLambdaExpression(SimpleLambdaExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitSimpleLambdaExpression(node);
            this.stack.Pop();
        }
        public override void VisitRefExpression(RefExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitRefExpression(node);
            this.stack.Pop();
        }
        public override void VisitParenthesizedLambdaExpression(ParenthesizedLambdaExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitParenthesizedLambdaExpression(node);
            this.stack.Pop();
        }
        public override void VisitInitializerExpression(InitializerExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitInitializerExpression(node);
            this.stack.Pop();
        }
        public override void VisitObjectCreationExpression(ObjectCreationExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitObjectCreationExpression(node);
            this.stack.Pop();
        }
        public override void VisitAnonymousObjectMemberDeclarator(AnonymousObjectMemberDeclaratorSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAnonymousObjectMemberDeclarator(node);
            this.stack.Pop();
        }
        public override void VisitAnonymousObjectCreationExpression(AnonymousObjectCreationExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitAnonymousObjectCreationExpression(node);
            this.stack.Pop();
        }
        public override void VisitArrayCreationExpression(ArrayCreationExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitArrayCreationExpression(node);
            this.stack.Pop();
        }
        public override void VisitImplicitArrayCreationExpression(ImplicitArrayCreationExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitImplicitArrayCreationExpression(node);
            this.stack.Pop();
        }
        public override void VisitStackAllocArrayCreationExpression(StackAllocArrayCreationExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitStackAllocArrayCreationExpression(node);
            this.stack.Pop();
        }
        public override void VisitImplicitStackAllocArrayCreationExpression(ImplicitStackAllocArrayCreationExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitImplicitStackAllocArrayCreationExpression(node);
            this.stack.Pop();
        }
        public override void VisitQueryExpression(QueryExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitQueryExpression(node);
            this.stack.Pop();
        }
        public override void VisitQueryBody(QueryBodySyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitQueryBody(node);
            this.stack.Pop();
        }
        public override void VisitFromClause(FromClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitFromClause(node);
            this.stack.Pop();
        }
        public override void VisitLetClause(LetClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitLetClause(node);
            this.stack.Pop();
        }
        public override void VisitJoinClause(JoinClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitJoinClause(node);
            this.stack.Pop();
        }
        public override void VisitJoinIntoClause(JoinIntoClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitJoinIntoClause(node);
            this.stack.Pop();
        }
        public override void VisitWhereClause(WhereClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitWhereClause(node);
            this.stack.Pop();
        }
        public override void VisitOrderByClause(OrderByClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitOrderByClause(node);
            this.stack.Pop();
        }
        public override void VisitOrdering(OrderingSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitOrdering(node);
            this.stack.Pop();
        }
        public override void VisitSelectClause(SelectClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitSelectClause(node);
            this.stack.Pop();
        }
        public override void VisitGroupClause(GroupClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitGroupClause(node);
            this.stack.Pop();
        }
        public override void VisitQueryContinuation(QueryContinuationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitQueryContinuation(node);
            this.stack.Pop();
        }
        public override void VisitOmittedArraySizeExpression(OmittedArraySizeExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitOmittedArraySizeExpression(node);
            this.stack.Pop();
        }
        public override void VisitInterpolatedStringExpression(InterpolatedStringExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitInterpolatedStringExpression(node);
            this.stack.Pop();
        }
        public override void VisitIsPatternExpression(IsPatternExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitIsPatternExpression(node);
            this.stack.Pop();
        }
        public override void VisitThrowExpression(ThrowExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitThrowExpression(node);
            this.stack.Pop();
        }
        public override void VisitWhenClause(WhenClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitWhenClause(node);
            this.stack.Pop();
        }
        public override void VisitDiscardPattern(DiscardPatternSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitDiscardPattern(node);
            this.stack.Pop();
        }
        public override void VisitDeclarationPattern(DeclarationPatternSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitDeclarationPattern(node);
            this.stack.Pop();
        }
        public override void VisitVarPattern(VarPatternSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitVarPattern(node);
            this.stack.Pop();
        }
        public override void VisitRecursivePattern(RecursivePatternSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitRecursivePattern(node);
            this.stack.Pop();
        }
        public override void VisitPositionalPatternClause(PositionalPatternClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitPositionalPatternClause(node);
            this.stack.Pop();
        }
        public override void VisitPropertyPatternClause(PropertyPatternClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitPropertyPatternClause(node);
            this.stack.Pop();
        }
        public override void VisitSubpattern(SubpatternSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitSubpattern(node);
            this.stack.Pop();
        }
        public override void VisitConstantPattern(ConstantPatternSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitConstantPattern(node);
            this.stack.Pop();
        }
        public override void VisitInterpolatedStringText(InterpolatedStringTextSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitInterpolatedStringText(node);
            this.stack.Pop();
        }
        public override void VisitInterpolation(InterpolationSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitInterpolation(node);
            this.stack.Pop();
        }
        public override void VisitInterpolationAlignmentClause(InterpolationAlignmentClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitInterpolationAlignmentClause(node);
            this.stack.Pop();
        }
        public override void VisitInterpolationFormatClause(InterpolationFormatClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitInterpolationFormatClause(node);
            this.stack.Pop();
        }
        public override void VisitGlobalStatement(GlobalStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitGlobalStatement(node);
            this.stack.Pop();
        }
        public override void VisitBlock(BlockSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitBlock(node);
            this.stack.Pop();
        }
        public override void VisitLocalFunctionStatement(LocalFunctionStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitLocalFunctionStatement(node);
            this.stack.Pop();
        }
        public override void VisitLocalDeclarationStatement(LocalDeclarationStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitLocalDeclarationStatement(node);
            this.stack.Pop();
        }
        public override void VisitVariableDeclaration(VariableDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitVariableDeclaration(node);
            this.stack.Pop();
        }
        public override void VisitVariableDeclarator(VariableDeclaratorSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitVariableDeclarator(node);
            this.stack.Pop();
        }
        public override void VisitEqualsValueClause(EqualsValueClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitEqualsValueClause(node);
            this.stack.Pop();
        }
        public override void VisitSingleVariableDesignation(SingleVariableDesignationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitSingleVariableDesignation(node);
            this.stack.Pop();
        }
        public override void VisitDiscardDesignation(DiscardDesignationSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitDiscardDesignation(node);
            this.stack.Pop();
        }
        public override void VisitParenthesizedVariableDesignation(ParenthesizedVariableDesignationSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitParenthesizedVariableDesignation(node);
            this.stack.Pop();
        }
        public override void VisitExpressionStatement(ExpressionStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitExpressionStatement(node);
            this.stack.Pop();
        }
        public override void VisitEmptyStatement(EmptyStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitEmptyStatement(node);
            this.stack.Pop();
        }
        public override void VisitLabeledStatement(LabeledStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitLabeledStatement(node);
            this.stack.Pop();
        }
        public override void VisitGotoStatement(GotoStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitGotoStatement(node);
            this.stack.Pop();
        }
        public override void VisitBreakStatement(BreakStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitBreakStatement(node);
            this.stack.Pop();
        }
        public override void VisitContinueStatement(ContinueStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitContinueStatement(node);
            this.stack.Pop();
        }
        public override void VisitReturnStatement(ReturnStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitReturnStatement(node);
            this.stack.Pop();
        }
        public override void VisitThrowStatement(ThrowStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitThrowStatement(node);
            this.stack.Pop();
        }
        public override void VisitYieldStatement(YieldStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitYieldStatement(node);
            this.stack.Pop();
        }
        public override void VisitWhileStatement(WhileStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitWhileStatement(node);
            this.stack.Pop();
        }
        public override void VisitDoStatement(DoStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitDoStatement(node);
            this.stack.Pop();
        }
        public override void VisitForStatement(ForStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitForStatement(node);
            this.stack.Pop();
        }
        public override void VisitForEachStatement(ForEachStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitForEachStatement(node);
            this.stack.Pop();
        }
        public override void VisitForEachVariableStatement(ForEachVariableStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitForEachVariableStatement(node);
            this.stack.Pop();
        }
        public override void VisitUsingStatement(UsingStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitUsingStatement(node);
            this.stack.Pop();
        }
        public override void VisitFixedStatement(FixedStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitFixedStatement(node);
            this.stack.Pop();
        }
        public override void VisitCheckedStatement(CheckedStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitCheckedStatement(node);
            this.stack.Pop();
        }
        public override void VisitUnsafeStatement(UnsafeStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitUnsafeStatement(node);
            this.stack.Pop();
        }
        public override void VisitLockStatement(LockStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitLockStatement(node);
            this.stack.Pop();
        }
        public override void VisitIfStatement(IfStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitIfStatement(node);
            this.stack.Pop();
        }
        public override void VisitElseClause(ElseClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitElseClause(node);
            this.stack.Pop();
        }
        public override void VisitSwitchStatement(SwitchStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitSwitchStatement(node);
            this.stack.Pop();
        }
        public override void VisitSwitchSection(SwitchSectionSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitSwitchSection(node);
            this.stack.Pop();
        }
        public override void VisitCasePatternSwitchLabel(CasePatternSwitchLabelSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitCasePatternSwitchLabel(node);
            this.stack.Pop();
        }
        public override void VisitCaseSwitchLabel(CaseSwitchLabelSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitCaseSwitchLabel(node);
            this.stack.Pop();
        }
        public override void VisitDefaultSwitchLabel(DefaultSwitchLabelSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitDefaultSwitchLabel(node);
            this.stack.Pop();
        }
        public override void VisitSwitchExpression(SwitchExpressionSyntax node)
        {
            var element = CreateElement(node);
            this.AddTypeAttribute(element, node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitSwitchExpression(node);
            this.stack.Pop();
        }
        public override void VisitSwitchExpressionArm(SwitchExpressionArmSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitSwitchExpressionArm(node);
            this.stack.Pop();
        }
        public override void VisitTryStatement(TryStatementSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitTryStatement(node);
            this.stack.Pop();
        }
        public override void VisitCatchClause(CatchClauseSyntax node)
        {
            var element = CreateElement(node);
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitCatchClause(node);
            this.stack.Pop();
        }
        public override void VisitCatchDeclaration(CatchDeclarationSyntax node)
        {
            var element = CreateElement(node);
            this.AddSymbolInformation(element, this.semanticModel.GetDeclaredSymbol(node));
            this.AddLocationAttributes(element, node);
            this.stack.Peek().Add(element);
            this.stack.Push(element);
            base.VisitCatchDeclaration(node);
            this.stack.Pop();
        }
    }
}
